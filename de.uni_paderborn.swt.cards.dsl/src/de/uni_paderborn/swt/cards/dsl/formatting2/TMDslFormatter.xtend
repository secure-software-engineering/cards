/*
 * generated by Xtext 2.21.0
 */
package de.uni_paderborn.swt.cards.dsl.formatting2

import com.google.inject.Inject
import de.uni_paderborn.swt.cards.dsl.services.TMDslGrammarAccess
import de.uni_paderborn.swt.cards.dsl.tmdsl.Model
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import de.uni_paderborn.swt.cards.dsl.tmdsl.DataType
import de.uni_paderborn.swt.cards.dsl.tmdsl.TmdslPackage
import de.uni_paderborn.swt.cards.dsl.tmdsl.Component
import de.uni_paderborn.swt.cards.dsl.tmdsl.CompositeComponent
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentPart
import de.uni_paderborn.swt.cards.dsl.tmdsl.Port
import de.uni_paderborn.swt.cards.dsl.tmdsl.PortPart
import de.uni_paderborn.swt.cards.dsl.tmdsl.PortConnector
import de.uni_paderborn.swt.cards.dsl.tmdsl.PortMapping
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter
import de.uni_paderborn.swt.cards.dsl.tmdsl.AtomicComponent
import de.uni_paderborn.swt.cards.dsl.tmdsl.Groups
import de.uni_paderborn.swt.cards.dsl.tmdsl.DataGroup
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentGroup
import de.uni_paderborn.swt.cards.dsl.tmdsl.Sanitizer
import de.uni_paderborn.swt.cards.dsl.tmdsl.SecurityDefinitions
import de.uni_paderborn.swt.cards.dsl.tmdsl.Restriction
import de.uni_paderborn.swt.cards.dsl.tmdsl.AllowGroupRestriction
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentPreventRefinement
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentPartPreventRefinement
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentGroupPreventRefinement
import de.uni_paderborn.swt.cards.dsl.tmdsl.PreventGroupRestriction
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentAllowRefinement
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentPartAllowRefinement
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentGroupAllowRefinement
import de.uni_paderborn.swt.cards.dsl.tmdsl.Assumption
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentAssumption
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentSanitizerAssumption
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentFlowSanitizationAssumption
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentFlowAssumption
import de.uni_paderborn.swt.cards.dsl.tmdsl.PortSanitizerAssumption
import de.uni_paderborn.swt.cards.dsl.tmdsl.PortAssumption
import de.uni_paderborn.swt.cards.dsl.tmdsl.ComponentKind
import de.uni_paderborn.swt.cards.dsl.tmdsl.DataTypeLabel

class TMDslFormatter extends AbstractFormatter2 {
	
	@Inject extension TMDslGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		model.system.format
		model.groups.format
		model.securityDefinitions.format
		model.restriction.format
		model.assumption.format
	}

	def dispatch void format(de.uni_paderborn.swt.cards.dsl.tmdsl.System system, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		//println("format system")
		val open = system.regionFor.keyword(systemAccess.leftCurlyBracketKeyword_2)
		val close =  system.regionFor.keyword(systemAccess.rightCurlyBracketKeyword_8)
		
		
		open.append[newLine]
		interior(open, close)[indent]
		
		
		val mappingModel = system.regionFor.keyword(systemAccess.mappingModelKeyword_3_0)
		//mappingModel.append[newLine]
		
		val dataTypeOpen = system.regionFor.keyword(systemAccess.dataTypesKeyword_4_0)
		dataTypeOpen.prepend[newLine]
		val dataTypeClose = system.regionFor.keyword(systemAccess.rightCurlyBracketKeyword_4_4)
		dataTypeClose.prepend[newLine]
		interior(dataTypeOpen, dataTypeClose)[indent]
		
		for (dataType : system.datatypes) {
			dataType.format
		}
		
		val dataLabelsOpen = system.regionFor.keyword(systemAccess.dataLabelsKeyword_5_0)
		val dataLabelsClose = system.regionFor.keyword(systemAccess.rightCurlyBracketKeyword_5_4)
		interior(dataLabelsOpen, dataLabelsClose)[indent]
		dataLabelsOpen.prepend[newLine]
		
		for (dataLabel : system.dataLabels) {
			dataLabel.format
		}
		
		
		val compKindsOpen = system.regionFor.keyword(systemAccess.componentKindsKeyword_6_0)
		val compKindsClose = system.regionFor.keyword(systemAccess.rightCurlyBracketKeyword_6_4)
		interior(compKindsOpen, compKindsClose)[indent]
		compKindsOpen.prepend[newLine]
		
		for (compKind : system.componentKinds) {
			compKind.format
		}
		
		
		val compOpen = system.regionFor.keyword(systemAccess.componentsKeyword_7_0)
		val compClose = system.regionFor.keyword(systemAccess.rightCurlyBracketKeyword_7_4)
		compOpen.prepend[newLine]
		interior(compOpen, compClose)[indent]
		

		for (component : system.components) {
			component.format
		}
	}
	
	def dispatch void format(DataTypeLabel dataLabel, extension IFormattableDocument document) {
		dataLabel.regionFor.keyword(dataTypeLabelAccess.dataTypeLabelKeyword_1).prepend[newLine]
	} 
	
	def dispatch void format(Component component, extension IFormattableDocument document) {
		if (component instanceof CompositeComponent) {
			val cc = component as CompositeComponent
			cc.format
		} else if (component instanceof AtomicComponent) {
			val ac = component as AtomicComponent
			ac.format
		}
	}
	
	def dispatch void format(AtomicComponent component, extension IFormattableDocument document) {
		component.regionFor.keyword(atomicComponentAccess.atomicComponentKeyword_1).prepend[newLine]
		val open = component.regionFor.keyword(atomicComponentAccess.leftCurlyBracketKeyword_3)
		val close =  component.regionFor.keyword(atomicComponentAccess.rightCurlyBracketKeyword_8)
		close.prepend[newLine]
		interior(open, close)[indent]
		open.append[newLine]
		
		component.regionFor.keyword(atomicComponentAccess.componentKindKeyword_5_0).prepend[newLine]
		
		
		val portsOpen = component.regionFor.keyword(atomicComponentAccess.leftCurlyBracketKeyword_6_1)
		val portsClose = component.regionFor.keyword(atomicComponentAccess.rightCurlyBracketKeyword_6_4)
		interior(portsOpen, portsClose)[indent]
		portsClose.prepend[newLine]
		
		for (port : component.ports) {
			port.format
		}
		
		component.regionFor.keyword(atomicComponentAccess.commaKeyword_5_2_0).prepend[noSpace]
		component.regionFor.keyword(atomicComponentAccess.commaKeyword_5_2_0).append[oneSpace]
		component.regionFor.keyword(atomicComponentAccess.commaKeyword_7_3_0).prepend[noSpace]
		component.regionFor.keyword(atomicComponentAccess.commaKeyword_7_3_0).append[noSpace]
		
		val sourceForOpen = component.regionFor.keyword(atomicComponentAccess.leftCurlyBracketKeyword_7_1)
		val sourceForClose = component.regionFor.keyword(atomicComponentAccess.rightCurlyBracketKeyword_7_4)
		component.regionFor.keyword(atomicComponentAccess.sourceOfKeyword_7_0).prepend[newLine]
		interior(sourceForOpen, sourceForClose)[indent]
		
	}
		
	def dispatch void format(CompositeComponent component, extension IFormattableDocument document) {
		//println("format compositecomponent")

		val open = component.regionFor.keyword(compositeComponentAccess.leftCurlyBracketKeyword_3)
		val close =  component.regionFor.keyword(compositeComponentAccess.rightCurlyBracketKeyword_10)
		interior(open, close)[indent]
		
		component.regionFor.keyword(compositeComponentAccess.compositeComponentKeyword_1).prepend[newLine]
		
		component.prepend[newLine]
		open.append[newLine]
		
		
		component.regionFor.keyword(compositeComponentAccess.componentPartsKeyword_7_0).prepend[newLine]
		component.regionFor.keyword(compositeComponentAccess.portConnectorsKeyword_8_0).prepend[newLine]
		component.regionFor.keyword(compositeComponentAccess.portMappingsKeyword_9_0).prepend[newLine]
		
		component.regionFor.keyword(compositeComponentAccess.componentKindKeyword_5_0).prepend[newLine]
		component.regionFor.keyword(compositeComponentAccess.commaKeyword_5_2_0).prepend[noSpace]
		component.regionFor.keyword(compositeComponentAccess.commaKeyword_5_2_0).append[oneSpace]
		
		val portsOpen = component.regionFor.keyword(compositeComponentAccess.leftCurlyBracketKeyword_6_1)
		val portsClose = component.regionFor.keyword(compositeComponentAccess.rightCurlyBracketKeyword_6_4)
		interior(portsOpen, portsClose)[indent]
		portsClose.prepend[newLine]
		
		for (port : component.ports) {
			port.format
		}
		
		
		val partsOpen = component.regionFor.keyword(compositeComponentAccess.leftCurlyBracketKeyword_7_1)
		val partsClose = component.regionFor.keyword(compositeComponentAccess.rightCurlyBracketKeyword_7_4)
		interior(partsOpen, partsClose)[indent]
		partsClose.prepend[newLine]
		
		for (componentPart : component.componentParts)	{
			componentPart.format
		}
		
		val connectorsOpen = component.regionFor.keyword(compositeComponentAccess.leftCurlyBracketKeyword_8_1)
		val connectorsClose = component.regionFor.keyword(compositeComponentAccess.rightCurlyBracketKeyword_8_4)
		interior(connectorsOpen, connectorsClose)[indent]
		connectorsClose.prepend[newLine]
		
		for (portConnector : component.portconnectors)	{
			portConnector.format
		}
		
		val mappingsOpen = component.regionFor.keyword(compositeComponentAccess.leftCurlyBracketKeyword_9_1)
		val mappingsClose = component.regionFor.keyword(compositeComponentAccess.rightCurlyBracketKeyword_9_4)
		interior(mappingsOpen, mappingsClose)[indent]
		mappingsClose.prepend[newLine]
		
		for (portMapping : component.portMappings)	{
			portMapping.format
		}
		
		
		
		
		close.prepend[newLine]		
	}
	
	def dispatch void format(ComponentPart componentPart, extension IFormattableDocument document) {
		//println("format compPart")
		val open = componentPart.regionFor.keyword(componentPartAccess.leftCurlyBracketKeyword_3)
		val close =  componentPart.regionFor.keyword(componentPartAccess.rightCurlyBracketKeyword_6)	
		
		componentPart.regionFor.keyword(componentPartAccess.componentPartKeyword_1).prepend[newLine]
		componentPart.regionFor.keyword(componentPartAccess.portPartsKeyword_5_0).prepend[newLine]
		componentPart.regionFor.keyword(componentPartAccess.rightCurlyBracketKeyword_5_4).prepend[newLine]
		
		
		val portPartsOpen = componentPart.regionFor.keyword(componentPartAccess.leftCurlyBracketKeyword_5_1)
		val portPartsClose = componentPart.regionFor.keyword(componentPartAccess.rightCurlyBracketKeyword_5_4)
		interior(portPartsOpen, portPartsClose)[indent]
		
		for(portPart : componentPart.portParts) {
			portPart.format
		}
		componentPart.regionFor.keyword(componentPartAccess.commaKeyword_5_3_0).surround[noSpace]
		
		open.append[newLine]
		close.prepend[newLine]	
		interior(open, close)[indent]
	}
	
	def dispatch void format(Port port, extension IFormattableDocument document) {
		//println("format port")
		port.prepend[newLine]
	}
	
	def dispatch void format(PortPart portPart, extension IFormattableDocument document) {
		portPart.prepend[newLine]
	}
	
	def dispatch void format(PortConnector portConnector, extension IFormattableDocument document) {
		portConnector.prepend[newLine]
		portConnector.regionFor.keyword(portConnectorAccess.fullStopKeyword_4).surround[noSpace]
		portConnector.regionFor.keyword(portConnectorAccess.fullStopKeyword_8).surround[noSpace]
	}
	
	def dispatch void format(PortMapping portMapping, extension IFormattableDocument document) {
		portMapping.prepend[newLine]
		portMapping.regionFor.keyword(portMappingAccess.fullStopKeyword_6).surround[noSpace]
	}
	
	def dispatch void format(Groups groups, extension IFormattableDocument document) {
		groups.regionFor.keyword(groupsAccess.groupsKeyword_1).prepend[newLine]
		
		val groupsOpen = groups.regionFor.keyword(groupsAccess.leftCurlyBracketKeyword_2)
		groupsOpen.prepend[oneSpace]
		val groupsClose = groups.regionFor.keyword(groupsAccess.rightCurlyBracketKeyword_4)
		groupsClose.prepend[newLine]
		interior(groupsOpen, groupsClose)[indent]
		
		groups.dataGroups.forEach[dataGroup | dataGroup.format]
		groups.componentGroups.forEach[componentGroup | componentGroup.format]
		groups.portGroup.forEach[portGroup | portGroup.format]
	}
	
	def dispatch void format(DataGroup group, extension IFormattableDocument document) {
		group.regionFor.keyword(dataGroupAccess.dataGroupKeyword_0).prepend[newLine]
		group.regionFor.keyword(dataGroupAccess.commaKeyword_4_0).prepend[noSpace]
		
		val open = group.regionFor.keyword(dataGroupAccess.leftCurlyBracketKeyword_2)
		val close = group.regionFor.keyword(dataGroupAccess.rightCurlyBracketKeyword_5)
		interior(open, close)[indent]
		close.prepend[newLine]
		
		group.regionFor.crossRefs(dataGroupAccess.groupedDataDataTypeCrossReference_3_0, dataGroupAccess.groupedDataDataTypeCrossReference_4_1_0)
			.forEach[semanticRegion | semanticRegion.prepend[newLine]]
	}	
	
	def dispatch void format(DataType type, extension IFormattableDocument document) {
		type.prepend[newLine]
	}
	
	def dispatch void format(ComponentKind kind, extension IFormattableDocument document) {
		kind.prepend[newLine]
	}
	
	def dispatch void format(ComponentGroup group, extension IFormattableDocument document) {
		group.regionFor.keyword(componentGroupAccess.componentGroupKeyword_0).prepend[newLine]
		
		val open = group.regionFor.keyword(componentGroupAccess.leftCurlyBracketKeyword_2)
		val close = group.regionFor.keyword(componentGroupAccess.rightCurlyBracketKeyword_5)
		interior(open, close)[indent]
		close.prepend[newLine]
		group.regionFor.crossRefs(componentGroupAccess.groupedComponentsComponentCrossReference_3_0, componentGroupAccess.groupedComponentsComponentCrossReference_4_1_0)
			.forEach[semanticRegion | semanticRegion.prepend[newLine]]
	}	
	
	def dispatch void format(SecurityDefinitions secDefs, extension IFormattableDocument document) {
		secDefs.prepend[newLine]
		val sanOpen = secDefs.regionFor.keyword(securityDefinitionsAccess.leftCurlyBracketKeyword_2)
		val sanClose = secDefs.regionFor.keyword(securityDefinitionsAccess.rightCurlyBracketKeyword_4)
		
		sanOpen.prepend[oneSpace]
		sanClose.prepend[newLine]
		
		interior(sanOpen, sanClose)[indent]
		
		secDefs.sanitizers.forEach[san | san.format]
	}
	
	def dispatch void format(Sanitizer sanitizer, extension IFormattableDocument document) {
		sanitizer.prepend[newLine]
		sanitizer.surround[indent]
	}
	
	def dispatch void format(Restriction restriction, extension IFormattableDocument document) {
		restriction.prepend[newLine]
		
		val resOpen = restriction.regionFor.keyword(restrictionAccess.leftCurlyBracketKeyword_2)
		val resClose = restriction.regionFor.keyword(restrictionAccess.rightCurlyBracketKeyword_4)
		
		interior(resOpen, resClose)[indent]
		
		restriction.restrictions.forEach[res | res.format]
	}
	
	def dispatch void format(AllowGroupRestriction agr, extension IFormattableDocument document) {
		agr.prepend[newLine]
		val open = agr.regionFor.keyword(allowGroupRestrictionAccess.leftCurlyBracketKeyword_3)
		val close = agr.regionFor.keyword(allowGroupRestrictionAccess.rightCurlyBracketKeyword_5)
		interior(open, close)[indent]
		close.prepend[newLine]		
		
		agr.compPreventRefinements.forEach[cpr | cpr.format]
		agr.compPartPreventRefinements.forEach[cppr | cppr.format]
		agr.compGroupPreventRefinements.forEach[cgpr | cgpr.format]
	}
	
	def dispatch void format(ComponentPreventRefinement cpr, extension IFormattableDocument document) {
		cpr.prepend[newLine]
	}
	
	def dispatch void format(ComponentPartPreventRefinement cppr, extension IFormattableDocument document) {
		cppr.prepend[newLine]
	}
	
	def dispatch void format(ComponentGroupPreventRefinement cgpr, extension IFormattableDocument document) {
		cgpr.prepend[newLine]
	}
	
	def dispatch void format(PreventGroupRestriction agr, extension IFormattableDocument document) {
		agr.prepend[newLine]
		val open = agr.regionFor.keyword(allowGroupRestrictionAccess.leftCurlyBracketKeyword_3)
		val close = agr.regionFor.keyword(allowGroupRestrictionAccess.rightCurlyBracketKeyword_5)
		interior(open, close)[indent]
		close.prepend[newLine]		
		
		agr.compAllowRefinement.forEach[car | car.format]
		agr.compPartRefinement.forEach[cpr | cpr.format]
		agr.compGroupAllowRefinement.forEach[cgar | cgar.format]
	}
	
	def dispatch void format(ComponentAllowRefinement car, extension IFormattableDocument document) {
		car.prepend[newLine]
	}
	
	def dispatch void format(ComponentPartAllowRefinement cpar, extension IFormattableDocument document) {
		cpar.prepend[newLine]
	}
	
	def dispatch void format(ComponentGroupAllowRefinement cgar, extension IFormattableDocument document) {
		cgar.prepend[newLine]
	}

	def dispatch void format(Assumption assumption, extension IFormattableDocument document) {
		assumption.prepend[newLine]
		
		val assOpen = assumption.regionFor.keyword(assumptionAccess.leftCurlyBracketKeyword_2)
		val assClose = assumption.regionFor.keyword(assumptionAccess.rightCurlyBracketKeyword_9)
		
		interior(assOpen, assClose)[indent]

		assumption.regionFor.keyword(assumptionAccess.componentAssumptionsKeyword_3_0_0).prepend[newLine]
		val componentAssOpen = assumption.regionFor.keyword(assumptionAccess.leftCurlyBracketKeyword_3_0_1)
		val componentAssClose = assumption.regionFor.keyword(assumptionAccess.rightCurlyBracketKeyword_4_0_4)
		interior(componentAssOpen, componentAssClose)[indent]
		componentAssClose.prepend[newLine]
		assumption.componentAssumptions.forEach[componentAss | componentAss.format]
		
		assumption.regionFor.keyword(assumptionAccess.componentSanitzerAssumptionsKeyword_4_0_0).prepend[newLine]
		val compSanAssOpen = assumption.regionFor.keyword(assumptionAccess.leftCurlyBracketKeyword_4_0_1)
		val compSanAssClose = assumption.regionFor.keyword(assumptionAccess.rightCurlyBracketKeyword_4_0_4)
		interior(compSanAssOpen, compSanAssClose)[indent]
		compSanAssClose.prepend[newLine]
		assumption.componentSanitzerAssumptions.forEach[compSanAss | compSanAss.format]
		
		assumption.regionFor.keyword(assumptionAccess.flowAssumptionsKeyword_5_0_0).prepend[newLine]
		val flowAssOpen = assumption.regionFor.keyword(assumptionAccess.leftCurlyBracketKeyword_5_0_1)
		val flowAssClose = assumption.regionFor.keyword(assumptionAccess.rightCurlyBracketKeyword_5_0_4)
		interior(flowAssOpen, flowAssClose)[indent]
		flowAssClose.prepend[newLine]
		assumption.flowAssumptions.forEach[flowAss | flowAss.format]

		assumption.regionFor.keyword(assumptionAccess.portAssumptionsKeyword_6_0_0).prepend[newLine]
		val portAssOpen = assumption.regionFor.keyword(assumptionAccess.leftCurlyBracketKeyword_6_0_1)
		val portAssClose = assumption.regionFor.keyword(assumptionAccess.rightCurlyBracketKeyword_6_0_4)
		interior(portAssOpen, portAssClose)[indent]
		portAssClose.prepend[newLine]
		assumption.portAssumptions.forEach[portAss | portAss.format]
		
		assumption.regionFor.keyword(assumptionAccess.portSanitizerAssumptionsKeyword_7_0_0).prepend[newLine]
		val portSanAssOpen = assumption.regionFor.keyword(assumptionAccess.leftCurlyBracketKeyword_7_0_1)
		val portSanAssClose = assumption.regionFor.keyword(assumptionAccess.rightCurlyBracketKeyword_7_0_4)
		interior(portSanAssOpen, portSanAssClose)[indent]
		portSanAssClose.prepend[newLine]
		assumption.portSanitizerAssumptions.forEach[portSanAss | portSanAss.format]
		
		assumption.regionFor.keyword(assumptionAccess.sanitizersAssumptionsKeyword_8_0_0).prepend[newLine]
		val sanAssOpen = assumption.regionFor.keyword(assumptionAccess.leftCurlyBracketKeyword_8_0_1)
		val sanAssClose = assumption.regionFor.keyword(assumptionAccess.rightCurlyBracketKeyword_8_0_4)
		interior(sanAssOpen, sanAssClose)[indent]
		sanAssClose.prepend[newLine]
		assumption.sanitizersAssumptions.forEach[sanAss | sanAss.format]
	}
	
	def dispatch void format(ComponentAssumption assumption, extension IFormattableDocument document) {
		assumption.prepend[newLine]
	}
	
	def dispatch void format(ComponentSanitizerAssumption assumption, extension IFormattableDocument document) {
		assumption.prepend[newLine]
	}
	
	def dispatch void format(ComponentFlowAssumption assumption, extension IFormattableDocument document) {
		assumption.prepend[newLine]
	}
	
	def dispatch void format(ComponentFlowSanitizationAssumption assumption, extension IFormattableDocument document) {
		assumption.prepend[newLine]
	}
	
	def dispatch void format(PortAssumption assumption, extension IFormattableDocument document) {
		assumption.prepend[newLine]
	}
	
	def dispatch void format(PortSanitizerAssumption assumption, extension IFormattableDocument document) {
		assumption.prepend[newLine]
	}
}

